-- üîÅ Full Loop Collect & Auto Sell Fruits Hub
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Remotes
local CollectRemote = ReplicatedStorage
    :WaitForChild("Framework")
    :WaitForChild("Features")
    :WaitForChild("FruitTreeSystem")
    :WaitForChild("TreeStumpUtil")
    :WaitForChild("RemoteEvent")

local SellRemote = ReplicatedStorage
    :WaitForChild("Framework")
    :WaitForChild("Features")
    :WaitForChild("FruitStallSystem")
    :WaitForChild("FruitStallUtil")
    :WaitForChild("RemoteEvent")

-- ================= Loop Collect Fruits =================
local LoopButton = Instance.new("TextButton")
LoopButton.Parent = MainTab
LoopButton.Size = UDim2.new(0,220,0,40)
LoopButton.Position = UDim2.new(0,20,0,70)
LoopButton.BackgroundColor3 = _G.Primary
LoopButton.TextColor3 = Color3.fromRGB(255,255,255)
LoopButton.Text = "Loop Collect Fruits: OFF"
CreateRounded(LoopButton,8)

local collecting = false
local collectThread

-- Helper: find the player's plot
local function getPlayerPlot()
	for _, plot in ipairs(workspace:WaitForChild("PlayerPlots"):GetChildren()) do
		local owner = plot:FindFirstChild("Owner")
		if owner and owner.Value == player then
			return plot
		end
	end
end

-- Core collector logic
local function collectAllFruits()
	local total = 0
	pcall(function()
		local plot = getPlayerPlot()
		if not plot then return end

		local trees = plot:FindFirstChild("Trees")
		if not trees then return end

		for _, tree in ipairs(trees:GetChildren()) do
			for _, stump in ipairs(tree:GetChildren()) do
				for _, item in ipairs(stump:GetChildren()) do
					if item:IsA("Folder") or item:IsA("Model") then
						for _, obj in ipairs(item:GetDescendants()) do
							if obj.Name:match("_Fruit%d+") or obj.Name:match("Fruit%d+") then
								local fruitName = obj.Name:match("Fruit%d+")
								for a2 = 1, 2 do
									for a3 = 1, 2 do
										for a4 = 1, 2 do
											pcall(function()
												local args = {
													"PickFruit",
													a2,
													a3,
													a4,
													fruitName
												}
												CollectRemote:FireServer(unpack(args))
												total += 1
											end)
											task.wait(0.03)
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end)
	return total
end

-- Button toggle logic
LoopButton.MouseButton1Click:Connect(function()
	collecting = not collecting
	LoopButton.Text = "Loop Collect Fruits: " .. (collecting and "ON" or "OFF")
	LoopButton.BackgroundColor3 = collecting and Color3.fromRGB(60, 200, 90) or _G.Primary

	if collecting then
		collectThread = task.spawn(function()
			while collecting do
				local total = collectAllFruits()
				print("‚úÖ Collected fruits this cycle:", total)
				task.wait(0.8)
			end
		end)
	else
		if collectThread then
			task.cancel(collectThread)
		end
	end
end)

-- ================= Auto Sell Fruits =================
local SellButton = Instance.new("TextButton")
SellButton.Parent = MainTab
SellButton.Size = UDim2.new(0,220,0,40)
SellButton.Position = UDim2.new(0,20,0,120) -- below the collect button
SellButton.BackgroundColor3 = _G.Primary
SellButton.TextColor3 = Color3.fromRGB(255,255,255)
SellButton.Text = "Auto Sell Fruits: OFF"
CreateRounded(SellButton,8)

local selling = false
local sellThread

-- Button toggle logic
SellButton.MouseButton1Click:Connect(function()
	selling = not selling
	SellButton.Text = "Auto Sell Fruits: " .. (selling and "ON" or "OFF")
	SellButton.BackgroundColor3 = selling and Color3.fromRGB(60, 200, 90) or _G.Primary

	if selling then
		sellThread = task.spawn(function()
			while selling do
				pcall(function()
					local args = { "RequestGiveFruits" }
					SellRemote:FireServer(unpack(args))
				end)
				print("üí∞ Sold all fruits this cycle!")
				task.wait(2) -- interval between sells
			end
		end)
	else
		if sellThread then
			task.cancel(sellThread)
		end
	end
end)
