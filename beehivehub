-- BeeHiveHub - Miso UI Edition by Cheeky

-- Load Miso UI
local Miso = loadstring(game:HttpGet("https://raw.githubusercontent.com/InstantMiso/miso/main/source.lua"))()

-- Create Miso Window
local Window = Miso:CreateWindow({
    Name = "BeeHiveHub",
    LoadingTitle = "BeeHiveHub",
    LoadingSubtitle = "by Cheeky",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "BeeHiveHub",
        FileName = "Config"
    }
})

-- Create Tabs
local Tabs = {
    Main = Window:CreateTab("Main"),
    Visuals = Window:CreateTab("Visuals")
}

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- Remotes
local HoneyRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("HoneyUtil"):WaitForChild("RemoteEvent")
local FlowerRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("FlowerUtil"):WaitForChild("RemoteEvent")
local HiveRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("HiveUtil"):WaitForChild("RemoteEvent")

local flowerList = {"AquilegiaCoerulea","Bamboo","Bluebell","Cactus","Clover","Dahlia","Daisy",
                    "FireBlossom","KniphofiaUvaria","Lavender","Lily","MorningGlory","RedRose",
                    "Sunflower","Tulip","VenusFlyTrap"}

-- ===== Utility Function: Get Player Plot =====
local function getPlayerPlot()
    local plotsFolder = Workspace:FindFirstChild("Plots")
    if not plotsFolder then return nil end
    for _, plot in pairs(plotsFolder:GetChildren()) do
        local owner = plot:FindFirstChild("Owner")
        if owner and owner.Value == LocalPlayer then
            return plot
        end
    end
    return nil
end

-- ===== Main Tab: Auto Sell / Buy / Extract =====
local mainTab = Tabs.Main

-- Sell
local sellDelay = 5
local loopSell = false
mainTab:CreateSlider({
    Name = "Sell Delay (s)",
    Range = {1,60},
    Increment = 1,
    Suffix = "s",
    CurrentValue = sellDelay,
    Callback = function(value) sellDelay = value end
})
mainTab:CreateToggle({
    Name = "Auto Sell Honey",
    CurrentValue = false,
    Callback = function(state)
        loopSell = state
        if loopSell then
            task.spawn(function()
                while loopSell do
                    pcall(function()
                        HoneyRemote:FireServer("SellHoney","Honey")
                    end)
                    task.wait(sellDelay)
                end
            end)
        end
    end
})

-- Auto Buy Flowers
local selectedFlowers = {} -- table or list depending on UI
local loopBuy = false
local buyDelay = 30 -- fixed 30 seconds as requested

-- Helper to normalize selection into an array of names
local function normalizeSelection(sel)
    if not sel then return {} end
    -- If sel is a table of strings (array-style), return copy
    local t = {}
    local isArray = true
    local idx = 1
    for k,v in pairs(sel) do
        if type(k) ~= "number" then isArray = false break end
        idx = idx + 1
    end
    if isArray then
        for _,v in ipairs(sel) do
            if type(v) == "string" then table.insert(t, v) end
        end
        return t
    end
    -- If sel is a map (name -> bool), collect keys with truthy value
    for k,v in pairs(sel) do
        if v and type(k) == "string" then table.insert(t, k) end
    end
    return t
end

-- Create Dropdown for Flower Selection
local flowerDropdown = mainTab:CreateDropdown({
    Name = "Select Flowers to Auto Buy",
    Options = flowerList,
    CurrentOption = selectedFlowers,
    MultipleOptions = true,
    Flag = "SelectedFlowers",
    Callback = function(options)
        selectedFlowers = options
    end
})

-- Auto-buy loop toggle (buys 10 of each selected flower every 30s)
mainTab:CreateToggle({
    Name = "Auto Buy Selected Flowers x10 (every 30s)",
    CurrentValue = false,
    Callback = function(state)
        loopBuy = state
        if loopBuy then
            task.spawn(function()
                while loopBuy do
                    local chosen = {}
                    -- ensure selectedFlowers is an array of strings
                    if type(selectedFlowers) == "table" then
                        -- if it's an array-style table, use it
                        for _,v in ipairs(selectedFlowers) do
                            if type(v) == "string" then table.insert(chosen, v) end
                        end
                        -- if no array entries found, also accept map style
                        if #chosen == 0 then
                            for k,v in pairs(selectedFlowers) do
                                if v and type(k) == "string" then table.insert(chosen, k) end
                            end
                        end
                    end

                    if #chosen > 0 then
                        for _, flowerName in ipairs(chosen) do
                            for i = 1, 10 do
                                pcall(function()
                                    FlowerRemote:FireServer("BuyFlower", flowerName)
                                end)
                                task.wait(0.05)
                            end
                        end
                    end
                    task.wait(buyDelay)
                end
            end)
        end
    end
})

-- Extract
local extractDelay = 5
local loopExtract = false
mainTab:CreateSlider({
    Name = "Extract Delay (s)",
    Range = {1,60},
    Increment = 1,
    Suffix = "s",
    CurrentValue = extractDelay,
    Callback = function(value) extractDelay = value end
})
mainTab:CreateToggle({
    Name = "Smart Extract Honey",
    CurrentValue = false,
    Callback = function(state)
        loopExtract = state
        if loopExtract then
            task.spawn(function()
                while loopExtract do
                    local plot = getPlayerPlot()
                    if plot and plot:FindFirstChild("Hives") then
                        local builtHives = {}
                        for _, hive in pairs(plot.Hives:GetChildren()) do
                            if hive:GetAttribute("IsBuilt") then
                                table.insert(builtHives, hive)
                            end
                        end
                        if #builtHives > 0 then
                            pcall(function()
                                HiveRemote:FireServer("ExtractHoney", builtHives)
                            end)
                        end
                    end
                    task.wait(extractDelay)
                end
            end)
        end
    end
})

-- ===== Visuals Tab: Anti-Lag (Bees Only) =====
local visualsTab = Tabs.Visuals
local antiLagActive = false

visualsTab:CreateToggle({
    Name = "Anti-Lag (Bees Only)",
    CurrentValue = false,
    Callback = function(state)
        antiLagActive = state
        if antiLagActive then
            local plot = getPlayerPlot()
            if plot then
                for _, part in pairs(plot:GetDescendants()) do
                    if part.Name == "FlowerRenderer" and (part:IsA("Script") or part:IsA("LocalScript")) then
                        part.Disabled = true
                    elseif part:IsA("ParticleEmitter") then
                        part.Enabled = false
                    elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
                        part.Handle.Transparency = 1
                    elseif part:IsA("Motor6D") then
                        part:Destroy()
                    end
                end
            end
            Miso:Notify({Title="BeeHiveHub", Content="Anti-Lag enabled!", Duration=4})
        else
            Miso:Notify({Title="BeeHiveHub", Content="Anti-Lag disabled â€” rejoin to restore visuals.", Duration=4})
        end
    end
})

-- Final Notification
Miso:Notify({
    Title = "BeeHiveHub",
    Content = "BeeHiveHub loaded (Miso UI).",
    Duration = 5
})
