-- BeeHiveHub V2.2 - Rayfield Edition (Main + Visuals Tabs) by Cheeky

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua"))()

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "BeeHiveHub",
    LoadingTitle = "BeeHiveHub",
    LoadingSubtitle = "by Cheeky",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "BeeHiveHub",
        FileName = "Config"
    }
})

-- Create Tabs
local Tabs = {
    Main = Window:CreateTab("Main"),
    Visuals = Window:CreateTab("Visuals")
}

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Remotes
local HoneyRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("HoneyUtil"):WaitForChild("RemoteEvent")
local FlowerRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("FlowerUtil"):WaitForChild("RemoteEvent")
local HiveRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("HiveUtil"):WaitForChild("RemoteEvent")

local flowerList = {"AquilegiaCoerulea","Bamboo","Bluebell","Cactus","Clover","Dahlia","Daisy",
    "FireBlossom","KniphofiaUvaria","Lavender","Lily","MorningGlory","RedRose",
    "Sunflower","Tulip","VenusFlyTrap"}

-- ===== Utility Function: Get Player Plot =====
local function getPlayerPlot()
    local plotsFolder = Workspace:FindFirstChild("Plots")
    if not plotsFolder then return nil end
    for _, plot in pairs(plotsFolder:GetChildren()) do
        local owner = plot:FindFirstChild("Owner")
        if owner and owner.Value == LocalPlayer then
            return plot
        end
    end
    return nil
end

-- ===== Main Tab: Auto Sell / Buy / Extract =====
local mainTab = Tabs.Main

-- Sell
local sellDelay = 5
local loopSell, sellTask = false, nil
mainTab:CreateSlider({
    Name = "Sell Delay (s)",
    Range = {1,60},
    Increment = 1,
    Suffix = "s",
    CurrentValue = sellDelay,
    Callback = function(value) sellDelay = value end
})
mainTab:CreateToggle({
    Name = "Auto Sell Honey",
    CurrentValue = false,
    Callback = function(state)
        loopSell = state
        if loopSell then
            sellTask = task.spawn(function()
                while loopSell do
                    pcall(function() HoneyRemote:FireServer("SellHoney","Honey") end)
                    task.wait(sellDelay)
                end
            end)
        else
            if sellTask then task.cancel(sellTask) end
        end
    end
})

-- Buy
local buyDelay = 5
local loopBuy, buyTask = false, nil
mainTab:CreateSlider({
    Name = "Buy Delay (s)",
    Range = {1,60},
    Increment = 1,
    Suffix = "s",
    CurrentValue = buyDelay,
    Callback = function(value) buyDelay = value end
})
mainTab:CreateToggle({
    Name = "Auto Buy Flowers x10",
    CurrentValue = false,
    Callback = function(state)
        loopBuy = state
        if loopBuy then
            buyTask = task.spawn(function()
                while loopBuy do
                    for _, flowerName in ipairs(flowerList) do
                        for i = 1, 10 do
                            pcall(function() FlowerRemote:FireServer("BuyFlower", flowerName) end)
                            task.wait(0.05)
                        end
                    end
                    task.wait(buyDelay)
                end
            end)
        else
            if buyTask then task.cancel(buyTask) end
        end
    end
})

-- Extract
local extractDelay = 5
local loopExtract, extractTask = false, nil
mainTab:CreateSlider({
    Name = "Extract Delay (s)",
    Range = {1,60},
    Increment = 1,
    Suffix = "s",
    CurrentValue = extractDelay,
    Callback = function(value) extractDelay = value end
})
mainTab:CreateToggle({
    Name = "Smart Extract Honey",
    CurrentValue = false,
    Callback = function(state)
        loopExtract = state
        if loopExtract then
            extractTask = task.spawn(function()
                while loopExtract do
                    local plot = getPlayerPlot()
                    if plot and plot:FindFirstChild("Hives") then
                        local builtHives = {}
                        for _, hive in pairs(plot.Hives:GetChildren()) do
                            if hive:GetAttribute("IsBuilt") then
                                table.insert(builtHives, hive)
                            end
                        end
                        if #builtHives > 0 then
                            pcall(function() HiveRemote:FireServer("ExtractHoney", builtHives) end)
                        end
                    end
                    task.wait(extractDelay)
                end
            end)
        else
            if extractTask then task.cancel(extractTask) end
        end
    end
})

-- ===== Visuals Tab: Anti-Lag (Bees Only) =====
local visualsTab = Tabs.Visuals
local antiLagActive = false
local originalStates = {}

visualsTab:CreateToggle({
    Name = "Anti-Lag (Bees Only)",
    CurrentValue = false,
    Callback = function(state)
        antiLagActive = state
        local plot = getPlayerPlot()
        if plot then
            for _, part in pairs(plot:GetDescendants()) do
                if state then
                    if part:IsA("Script") or part:IsA("LocalScript") and part.Name == "FlowerRenderer" then
                        part.Disabled = true
                    elseif part:IsA("ParticleEmitter") then
                        originalStates[part] = part.Enabled
                        part.Enabled = false
                    elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
                        originalStates[part] = part.Handle.Transparency
                        part.Handle.Transparency = 1
                    elseif part:IsA("Motor6D") then
                        part:Destroy()
                    end
                else
                    -- Restore
                    if part:IsA("ParticleEmitter") and originalStates[part] ~= nil then
                        part.Enabled = originalStates[part]
                    elseif part:IsA("Accessory") and part:FindFirstChild("Handle") and originalStates[part] ~= nil then
                        part.Handle.Transparency = originalStates[part]
                    end
                end
            end
            Rayfield:Notify({Title="BeeHiveHub", Content="Anti-Lag " .. (state and "enabled" or "disabled") .. "!", Duration=4})
        else
            Rayfield:Notify({Title="BeeHiveHub", Content="No plot found for Anti-Lag.", Duration=4})
        end
    end
})

-- Final Notification
Rayfield:Notify({
    Title = "BeeHiveHub",
    Content = "Main + Visuals tabs loaded successfully!",
    Duration = 5
})
