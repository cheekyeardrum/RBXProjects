-- BeeHiveHub V2.2 - Rayfield Edition (Main + Visuals Tabs) by Cheeky

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua"))()

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "BeeHiveHub",
    LoadingTitle = "BeeHiveHub",
    LoadingSubtitle = "by Cheeky",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "BeeHiveHub",
        FileName = "Config"
    }
})

-- Create Tabs
local Tabs = {
    Main = Window:CreateTab("Main"),
    Visuals = Window:CreateTab("Visuals")
}

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- Remotes
local HoneyRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("HoneyUtil"):WaitForChild("RemoteEvent")
local FlowerRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("FlowerUtil"):WaitForChild("RemoteEvent")
local HiveRemote = ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Features")
    :WaitForChild("HoneySystem"):WaitForChild("HiveUtil"):WaitForChild("RemoteEvent")

local flowerList = {"AquilegiaCoerulea","Bamboo","Bluebell","Cactus","Clover","Dahlia","Daisy",
                    "FireBlossom","KniphofiaUvaria","Lavender","Lily","MorningGlory","RedRose",
                    "Sunflower","Tulip","VenusFlyTrap"}

-- ===== Utility Function: Get Player Plot =====
local function getPlayerPlot()
    local plotsFolder = Workspace:FindFirstChild("Plots")
    if not plotsFolder then return nil end
    for _, plot in pairs(plotsFolder:GetChildren()) do
        local owner = plot:FindFirstChild("Owner")
        if owner and owner.Value == LocalPlayer then
            return plot
        end
    end
    return nil
end

-- ===== Main Tab: Auto Sell / Buy / Extract =====
local mainTab = Tabs.Main

-- Sell
local sellDelay = 5
local loopSell = false
mainTab:CreateSlider({
    Name = "Sell Delay (s)",
    Range = {1,60},
    Increment = 1,
    Suffix = "s",
    CurrentValue = sellDelay,
    Callback = function(value) sellDelay = value end
})
mainTab:CreateToggle({
    Name = "Auto Sell Honey",
    CurrentValue = false,
    Callback = function(state)
        loopSell = state
        if loopSell then
            task.spawn(function()
                while loopSell do
                    pcall(function()
                        HoneyRemote:FireServer("SellHoney","Honey")
                    end)
                    task.wait(sellDelay)
                end
            end)
        end
    end
})

-- ===== Auto Buy Flowers (Multi-Select inside Rayfield + 10s Loop) =====
local selectedFlowers = {}
local loopBuy = false
local buyDelay = 10 -- seconds

local sectionExpanded = false
local flowerSectionObjects = {}

-- Create main button to show/hide flower list
local flowerDropdownButton = mainTab:CreateButton({
    Name = "Show/Hide Flower List",
    Callback = function()
        sectionExpanded = not sectionExpanded

        if sectionExpanded then
            Rayfield:Notify({
                Title = "BeeHiveHub",
                Content = "Flower list expanded.",
                Duration = 2
            })
            -- Create toggles for each flower
            for _, flowerName in ipairs(flowerList) do
                local toggle = mainTab:CreateToggle({
                    Name = flowerName,
                    CurrentValue = selectedFlowers[flowerName] or false,
                    Callback = function(state)
                        selectedFlowers[flowerName] = state
                    end
                })
                table.insert(flowerSectionObjects, toggle)
            end
        else
            -- Collapse the section and remove toggles
            for _, toggle in ipairs(flowerSectionObjects) do
                if toggle.SetVisible then
                    toggle:SetVisible(false)
                elseif toggle.Instance then
                    toggle.Instance:Destroy()
                end
            end
            table.clear(flowerSectionObjects)
            Rayfield:Notify({
                Title = "BeeHiveHub",
                Content = "Flower list hidden.",
                Duration = 2
            })
        end
    end
})

-- Toggle for auto-buy loop
mainTab:CreateToggle({
    Name = "Auto Buy Selected Flowers x10 (every 10s)",
    CurrentValue = false,
    Callback = function(state)
        loopBuy = state
        if loopBuy then
            task.spawn(function()
                while loopBuy do
                    local chosen = {}
                    for name, active in pairs(selectedFlowers) do
                        if active then table.insert(chosen, name) end
                    end

                    if #chosen > 0 then
                        for _, flowerName in ipairs(chosen) do
                            for i = 1, 10 do
                                pcall(function()
                                    FlowerRemote:FireServer("BuyFlower", flowerName)
                                end)
                                task.wait(0.05)
                            end
                        end
                    end
                    task.wait(buyDelay)
                end
            end)
        end
    end
})


        -- "Close" button
        local closeBtn = Instance.new("TextButton", frame)
        closeBtn.Size = UDim2.new(1, -10, 0, 30)
        closeBtn.Position = UDim2.new(0, 5, 1, -35)
        closeBtn.Text = "Close"
        closeBtn.Font = Enum.Font.SourceSansBold
        closeBtn.TextSize = 16
        closeBtn.BackgroundColor3 = Color3.fromRGB(180, 40, 40)
        closeBtn.TextColor3 = Color3.new(1,1,1)
        closeBtn.BorderSizePixel = 0
        closeBtn.MouseButton1Click:Connect(function()
            gui:Destroy()
        end)
    end)
end

-- Rayfield button that opens selector
mainTab:CreateButton({
    Name = "Select Flowers to Auto Buy",
    Callback = openFlowerSelector
})

-- Auto-buy toggle
mainTab:CreateToggle({
    Name = "Auto Buy Selected Flowers x10",
    CurrentValue = false,
    Callback = function(state)
        loopBuy = state
        if loopBuy then
            task.spawn(function()
                while loopBuy do
                    local chosen = {}
                    for name, active in pairs(selectedFlowers) do
                        if active then table.insert(chosen, name) end
                    end

                    if #chosen > 0 then
                        for _, flowerName in ipairs(chosen) do
                            for i = 1, 10 do
                                pcall(function()
                                    FlowerRemote:FireServer("BuyFlower", flowerName)
                                end)
                                task.wait(0.05)
                            end
                        end
                    end
                    task.wait(buyDelay)
                end
            end)
        end
    end
})

        -- Close button
        local closeBtn = Instance.new("TextButton", frame)
        closeBtn.Size = UDim2.new(1, -10, 0, 30)
        closeBtn.Position = UDim2.new(0, 5, 1, -35)
        closeBtn.Text = "Close"
        closeBtn.Font = Enum.Font.SourceSansBold
        closeBtn.TextSize = 16
        closeBtn.BackgroundColor3 = Color3.fromRGB(180, 40, 40)
        closeBtn.TextColor3 = Color3.new(1,1,1)
        closeBtn.BorderSizePixel = 0
        closeBtn.MouseButton1Click:Connect(function()
            gui:Destroy()
        end)
    end
})

-- Auto-buy loop toggle
mainTab:CreateToggle({
    Name = "Auto Buy Selected Flowers x10",
    CurrentValue = false,
    Callback = function(state)
        loopBuy = state
        if loopBuy then
            task.spawn(function()
                while loopBuy do
                    local chosen = {}
                    for name, active in pairs(selectedFlowers) do
                        if active then table.insert(chosen, name) end
                    end

                    if #chosen > 0 then
                        for _, flowerName in ipairs(chosen) do
                            for i = 1, 10 do
                                pcall(function()
                                    FlowerRemote:FireServer("BuyFlower", flowerName)
                                end)
                                task.wait(0.05)
                            end
                        end
                    end
                    task.wait(buyDelay)
                end
            end)
        end
    end
})


-- Extract
local extractDelay = 5
local loopExtract = false
mainTab:CreateSlider({
    Name = "Extract Delay (s)",
    Range = {1,60},
    Increment = 1,
    Suffix = "s",
    CurrentValue = extractDelay,
    Callback = function(value) extractDelay = value end
})
mainTab:CreateToggle({
    Name = "Smart Extract Honey",
    CurrentValue = false,
    Callback = function(state)
        loopExtract = state
        if loopExtract then
            task.spawn(function()
                while loopExtract do
                    local plot = getPlayerPlot()
                    if plot and plot:FindFirstChild("Hives") then
                        local builtHives = {}
                        for _, hive in pairs(plot.Hives:GetChildren()) do
                            if hive:GetAttribute("IsBuilt") then
                                table.insert(builtHives, hive)
                            end
                        end
                        if #builtHives > 0 then
                            pcall(function()
                                HiveRemote:FireServer("ExtractHoney", builtHives)
                            end)
                        end
                    end
                    task.wait(extractDelay)
                end
            end)
        end
    end
})

-- ===== Visuals Tab: Anti-Lag (Bees Only) =====
local visualsTab = Tabs.Visuals
local antiLagActive = false

visualsTab:CreateToggle({
    Name = "Anti-Lag (Bees Only)",
    CurrentValue = false,
    Callback = function(state)
        antiLagActive = state
        if antiLagActive then
            local plot = getPlayerPlot()
            if plot then
                for _, part in pairs(plot:GetDescendants()) do
                    if part.Name == "FlowerRenderer" and (part:IsA("Script") or part:IsA("LocalScript")) then
                        part.Disabled = true
                    elseif part:IsA("ParticleEmitter") then
                        part.Enabled = false
                    elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
                        part.Handle.Transparency = 1
                    elseif part:IsA("Motor6D") then
                        part:Destroy()
                    end
                end
            end
            Rayfield:Notify({Title="BeeHiveHub", Content="Anti-Lag enabled!", Duration=4})
        else
            Rayfield:Notify({Title="BeeHiveHub", Content="Anti-Lag disabled — rejoin to restore visuals.", Duration=4})
        end
    end
})

-- Final Notification
Rayfield:Notify({
    Title = "BeeHiveHub",
    Content = "Main + Visuals tabs loaded successfully!",
    Duration = 5
})
