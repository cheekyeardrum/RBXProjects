-- Clean Hub (Improved Version with Working AutoCollect)

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local guiParent = CoreGui

-- Sizes
local HUB_SZ = UDim2.new(0,700,0,450)
local MINIMIZED_SZ = UDim2.new(0,200,0,40)

-- Tween helper
local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local function tween(obj, props)
    local tw = TweenService:Create(obj, tweenInfo, props)
    tw:Play()
    return tw
end

local function round(ui, radius)
    local c = Instance.new("UICorner", ui)
    c.CornerRadius = UDim.new(0, radius or 8)
end

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CleanHubGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = guiParent

-- Main Frame
local frame = Instance.new("Frame", screenGui)
frame.Name = "MainFrame"
frame.Size = HUB_SZ
frame.Position = UDim2.new(0.5,0,0.5,0)
frame.AnchorPoint = Vector2.new(0.5,0.5)
frame.BackgroundColor3 = Color3.fromRGB(20,20,20)
frame.Active = true
frame.BorderSizePixel = 0
round(frame,10)

-- Dragging
local dragging, dragInput, dragStart, startPos
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset+delta.X,
            startPos.Y.Scale, startPos.Y.Offset+delta.Y
        )
    end
end)

local function enableDrag(target)
    target.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging = true
            dragStart = i.Position
            startPos = frame.Position
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    target.InputChanged:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseMovement or i.UserInputType==Enum.UserInputType.Touch then
            dragInput = i
        end
    end)
end

-- Top Bar
local bar=Instance.new("Frame",frame)
bar.Size=UDim2.new(1,0,0,40)
bar.Position=UDim2.new(0,0,0,0)
bar.BackgroundColor3=Color3.fromRGB(40,40,40)
bar.Active=true
round(bar,10)
enableDrag(bar)

local title=Instance.new("TextLabel",bar)
title.Size=UDim2.new(1,-120,1,0)
title.Position = UDim2.new(0,10,0,0)
title.BackgroundTransparency=1
title.Font=Enum.Font.SourceSansBold
title.TextSize=24
title.Text="Clean Hub"
title.TextColor3=Color3.new(1,1,1)
title.TextXAlignment=Enum.TextXAlignment.Left

local closeBtn=Instance.new("TextButton",bar)
closeBtn.Size=UDim2.new(0,30,0,30)
closeBtn.Position=UDim2.new(1,-40,0,5)
closeBtn.Text="X"
closeBtn.Font=Enum.Font.SourceSansBold
closeBtn.TextSize=18
closeBtn.BackgroundColor3=Color3.fromRGB(200,50,50)
closeBtn.TextColor3=Color3.new(1,1,1)
round(closeBtn,4)

local minBtn=Instance.new("TextButton",bar)
minBtn.Size=UDim2.new(0,30,0,30)
minBtn.Position=UDim2.new(1,-80,0,5)
minBtn.Text="-"
minBtn.Font=Enum.Font.SourceSansBold
minBtn.TextSize=22
minBtn.BackgroundColor3=Color3.fromRGB(100,100,100)
minBtn.TextColor3=Color3.new(1,1,1)
round(minBtn,4)

-- Tabs + Content
local tabsFrame=Instance.new("Frame",frame)
tabsFrame.Size=UDim2.new(0,140,1,-60)
tabsFrame.Position=UDim2.new(0,0,0,50)
tabsFrame.BackgroundTransparency=1

local contentFrame=Instance.new("Frame",frame)
contentFrame.Size=UDim2.new(1,-140,1,-60)
contentFrame.Position=UDim2.new(0,140,0,50)
contentFrame.BackgroundTransparency=1
enableDrag(contentFrame)

-- Tab Names
local tabNames={"AutoBuy","AutoCollect","Break Blocks"}
local tabButtons={}

-- Persistent toggle storage
local toggles = {
    AutoCollect = {State=false, Connection=nil},
    BreakBlocks = {State=false, Connection=nil}
}

-- AutoCollect Tab (fires all tycoons every 5s)

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local collecting = false
local collectConnection

-- Function: fire all tycoon slots
local function fireAllTycoons()
    local tycoonsFolder = Workspace:WaitForChild("Tycoons")

    for i = 1, 6 do
        local tycoonModel = tycoonsFolder:FindFirstChild("Tycoon_"..i)
        if tycoonModel and tycoonModel:FindFirstChild("Tycoon") then
            local slots = tycoonModel.Tycoon:FindFirstChild("Slots")
            if slots then
                for _, slotModel in pairs(slots:GetChildren()) do
                    local touchModel = slotModel:FindFirstChild("Touch")
                    if touchModel then
                        local touchPart = touchModel:FindFirstChild("Part")
                        if touchPart then
                            firetouchinterest(hrp, touchPart, 0)
                            firetouchinterest(hrp, touchPart, 1)
                        end
                    end
                end
            end
        end
    end
end

-- Toggle handler
local function setCollecting(state)
    if state and not collectConnection then
        collecting = true
        collectConnection = task.spawn(function()
            while collecting do
                fireAllTycoons()
                task.wait(5) -- wait 5s between collections
            end
        end)
    else
        collecting = false
        collectConnection = nil
    end
end

-- Add to your hub UI
local autoCollectTab = Window:CreateTab("AutoCollect", 4483362458) -- icon is placeholder

autoCollectTab:CreateToggle({
    Name = "Auto Collect",
    CurrentValue = false,
    Flag = "AutoCollectToggle",
    Callback = function(Value)
        setCollecting(Value)
    end,
})


-- ================= AutoCollect Tab =================
local function buildAutoCollectTab()
    for _,v in pairs(contentFrame:GetChildren()) do v:Destroy() end

    local label = Instance.new("TextLabel", contentFrame)
    label.Size = UDim2.new(1,-20,0,40)
    label.Position = UDim2.new(0,10,0,10)
    label.BackgroundTransparency = 1
    label.Text = "Auto Collect Money (Your Tycoon)"
    label.TextColor3 = Color3.new(1,1,1)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 22

    local toggle = Instance.new("TextButton", contentFrame)
    toggle.Size = UDim2.new(0,200,0,50)
    toggle.Position = UDim2.new(0,20,0,60)
    toggle.Text = toggles.AutoCollect.State and "ON" or "OFF"
    toggle.Font = Enum.Font.SourceSansBold
    toggle.TextSize = 20
    toggle.BackgroundColor3 = toggles.AutoCollect.State and Color3.fromRGB(50,150,50) or Color3.fromRGB(150,50,50)
    toggle.TextColor3 = Color3.new(1,1,1)
    round(toggle,8)

    -- Find your tycoon dynamically
    local function getMyTycoon()
        while true do
            for i = 1, 6 do
                local tycoon = Workspace:FindFirstChild("Tycoons") and Workspace.Tycoons:FindFirstChild("Tycoon_"..i)
                if tycoon and tycoon:FindFirstChild("Tycoon") and tycoon.Tycoon:FindFirstChild("Owner") then
                    if tycoon.Tycoon.Owner.Value == player then
                        return tycoon.Tycoon
                    end
                end
            end
            task.wait(1)
        end
    end

    local function fireTycoonSlots(myTycoon)
        local slots = myTycoon:FindFirstChild("Slots")
        if slots then
            for _, slotModel in pairs(slots:GetChildren()) do
                local touchModel = slotModel:FindFirstChild("Touch")
                if touchModel then
                    local touchPart = touchModel:FindFirstChild("Part")
                    if touchPart then
                        firetouchinterest(player.Character.HumanoidRootPart, touchPart, 0)
                        firetouchinterest(player.Character.HumanoidRootPart, touchPart, 1)
                    end
                end
            end
        end
    end

    toggle.MouseButton1Click:Connect(function()
        toggles.AutoCollect.State = not toggles.AutoCollect.State
        toggle.Text = toggles.AutoCollect.State and "ON" or "OFF"
        toggle.BackgroundColor3 = toggles.AutoCollect.State and Color3.fromRGB(50,150,50) or Color3.fromRGB(150,50,50)

        if toggles.AutoCollect.State and not toggles.AutoCollect.Connection then
            toggles.AutoCollect.Connection = task.spawn(function()
                local myTycoon = getMyTycoon()
                while toggles.AutoCollect.State do
                    fireTycoonSlots(myTycoon)
                    task.wait(5)
                end
            end)
        elseif not toggles.AutoCollect.State and toggles.AutoCollect.Connection then
            toggles.AutoCollect.Connection = nil
        end
    end)
end

-- ================= Break Blocks Tab =================
local function fireBreakBlocks()
    ReplicatedStorage:WaitForChild("Events"):WaitForChild("Touch"):FireServer("20")
end

local function buildBreakBlocksTab()
    for _,v in pairs(contentFrame:GetChildren()) do v:Destroy() end

    local label = Instance.new("TextLabel", contentFrame)
    label.Size = UDim2.new(1,-20,0,40)
    label.Position = UDim2.new(0,10,0,10)
    label.BackgroundTransparency = 1
    label.Text = "Break Blocks"
    label.TextColor3 = Color3.new(1,1,1)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 22

    local toggle = Instance.new("TextButton", contentFrame)
    toggle.Size = UDim2.new(0,200,0,50)
    toggle.Position = UDim2.new(0,20,0,60)
    toggle.Text = toggles.BreakBlocks.State and "ON" or "OFF"
    toggle.Font = Enum.Font.SourceSansBold
    toggle.TextSize = 20
    toggle.BackgroundColor3 = toggles.BreakBlocks.State and Color3.fromRGB(50,150,50) or Color3.fromRGB(150,50,50)
    toggle.TextColor3 = Color3.new(1,1,1)
    round(toggle,8)

    toggle.MouseButton1Click:Connect(function()
        toggles.BreakBlocks.State = not toggles.BreakBlocks.State
        toggle.Text = toggles.BreakBlocks.State and "ON" or "OFF"
        toggle.BackgroundColor3 = toggles.BreakBlocks.State and Color3.fromRGB(50,150,50) or Color3.fromRGB(150,50,50)

        if toggles.BreakBlocks.State and not toggles.BreakBlocks.Connection then
            toggles.BreakBlocks.Connection = RunService.Heartbeat:Connect(function()
                fireBreakBlocks()
                task.wait(0.3)
            end)
        elseif not toggles.BreakBlocks.State and toggles.BreakBlocks.Connection then
            toggles.BreakBlocks.Connection:Disconnect()
            toggles.BreakBlocks.Connection = nil
        end
    end)
end

-- Tab Functions
local tabFuncs = {buildAutoBuyTab, buildAutoCollectTab, buildBreakBlocksTab}
for i,name in ipairs(tabNames) do
    local btn = Instance.new("TextButton", tabsFrame)
    btn.Size = UDim2.new(1,0,0,40)
    btn.Position = UDim2.new(0,0,0,(i-1)*45)
    btn.Text = name
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 16
    btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
    btn.TextColor3 = Color3.new(1,1,1)
    round(btn,6)
    local func = tabFuncs[i]
    btn.MouseButton1Click:Connect(function()
        func() -- rebuild UI, leave toggles running
    end)
    table.insert(tabButtons, btn)
end

-- Close/Minimize
closeBtn.MouseButton1Click:Connect(function() screenGui:Destroy() end)
minBtn.MouseButton1Click:Connect(function()
    if frame.Size==HUB_SZ then
        tween(frame,{Size=MINIMIZED_SZ})
        contentFrame.Visible = false
        tabsFrame.Visible = false
    else
        tween(frame,{Size=HUB_SZ})
        contentFrame.Visible = true
        tabsFrame.Visible = true
    end
end)

-- Default tab
buildAutoBuyTab()
